install.packages(imager)
install.packages("imager")
# set global params
set.seed(-8)
options(digits=10)
# load libraries
library(imager)
library(grid)
# load test images
image_1 = load.image('RobertMixed03.jpg')
image_2 = load.image('smallstrelitzia.jpg')
image_3 = load.image('smallsunset.jpg')
setwd('/Users/jeffreywang/Desktop/AML/HW8')
# load test images
image_1 = load.image('RobertMixed03.jpg')
image_2 = load.image('smallstrelitzia.jpg')
image_3 = load.image('smallsunset.jpg')
image_4 = load.image('tree.jpg')
# get dim of each image
D.1 = dim(image_1)[1:2]
D.2 = dim(image_2)[1:2]
D.3 = dim(image_3)[1:2]
D.4 = dim(image_4)[1:2]
# combine RGB values into one array
image_1 = c(R(image_1)[,], G(image_1)[,], B(image_1)[,])
image_2 = c(R(image_2)[,], G(image_2)[,], B(image_2)[,])
image_3 = c(R(image_3)[,], G(image_3)[,], B(image_3)[,])
image_4 = c(R(image_4)[,], G(image_4)[,], B(image_4)[,])
# display an image
disp_img = function(image, D) {
# get R\G\B length
len = length(image) / 3
# construct RGB
r = image[1:len]
g = image[(len+1):(2*len)]
b = image[(2*len+1):(3*len)]
# combine and display
img_matrix = rgb(r, g, b)
dim(img_matrix) = D
img_matrix = t(img_matrix) # fill by col
grid.raster(img_matrix, interpolate = F)
}
# function to use for segmentation
segment = function(segments, img, D) {
# calculate initial centers using kmeans
img_sd = sd(img)
x = as.vector(img / img_sd) # scale to unit var
km = kmeans(x, centers = segments)
centers = km$centers
# prepare values to be used in e and m steps
m = length(x)
n = segments
w = matrix(0, nrow = m, ncol = n)
pi = as.vector(rep(1/n, n))
mu = as.vector(centers)
epsilon = 0.8
# start EM
iterations = 0
flag = TRUE
while(flag) {
# convergence use
mu_old = mu
#---- E-Step ------#
# loop over all pixels
for(i in 1:m) {
# calculate normlizer
denominator = 0
for(j in 1:n) {
sum_j = sum(exp((-1/2 * (x[i] - mu[j])^2)) * pi[j])
denominator = denominator + sum_j
}
# update weights
for(j in 1:n) {
w[i, j] = (exp((-1/2 * (x[i] - mu[j])^2)) * pi[j]) / denominator
}
}
#---- M-Step ------#
# update params
for(j in 1:n) {
mu[j] = sum(x * w[, j]) / sum(w[, j])
pi[j] = sum(w[, j]) / m
}
# test for convergence
if(abs(sum(mu) - sum(mu_old)) <  epsilon) {
flag = FALSE
}
# debug tools
iterations = iterations + 1
print(iterations)
}
# get cluster each pixel belongs to
indices = apply(w, 1, which.max)
# calculate mean color of closest segment
clusters_means = as.vector(rep(0, n))
for(j in 1:n) {
clusters_means[j] = mean(img[indices == j])
}
# prepare and display segmented image
segmented = clusters_means[indices]
disp_img(segmented, D)
}
#------ Part 1 --------#
#   Segment Images
#----------------------#
segment(10, image_1, D.1)
segment(20, image_1, D.1)
segment(50, image_1, D.1)
segment(10, image_2, D.2)
segment(20, image_2, D.2)
segment(10, image_2, D.2)
segment(20, image_2, D.2)
segment(50, image_2, D.2)
segment(10, image_3, D.3)
segment(10, image_3, D.3)
segment(20, image_3, D.3)
segment(50, image_3, D.3)
segment(10, image_4, D.4)
segment(20, image_4, D.4)
segment(50, image_4, D.4)
segment(20, image_4, D.3)
segment(20, image_4, D.4)
# set different seeds to cause kmeans
# to give different initial mu values
# sunset image is image_3
set.seed(-123)
segment(20, image_4, D.4)
set.seed(-1001)
segment(20, image_4, D.4)
set.seed(-1)
segment(20, image_4, D.4)
set.seed(367289)
segment(20, image_4, D.4)
